#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <stdlib.h>

#define NUM_PHILOSOPHERS 5
#define MAX_CYCLES 20  // Limits how many times each philosopher eats/thinks

sem_t waiter;  // Allows only 2 philosophers to eat at once
pthread_mutex_t chopsticks[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *(int *)arg;
    int left = id;
    int right = (id + 1) % NUM_PHILOSOPHERS;

    for (int cycle = 0; cycle < MAX_CYCLES; cycle++) {
        // Thinking
        printf("Philosopher %d is thinking...\n", id);
        usleep((rand() % 1000 + 500) * 1000);  // 0.5 to 1.5 sec

        // Request permission to eat
        sem_wait(&waiter);

        // Pick up chopsticks
        pthread_mutex_lock(&chopsticks[left]);
        pthread_mutex_lock(&chopsticks[right]);

        // Eating
        printf("Philosopher %d is eating...\n", id);
        usleep((rand() % 1000 + 500) * 1000);  // 0.5 to 1.5 sec

        // Release chopsticks
        pthread_mutex_unlock(&chopsticks[left]);
        pthread_mutex_unlock(&chopsticks[right]);

        // Release waiter slot
        sem_post(&waiter);
    }

    printf("Philosopher %d has left the table.\n", id);
    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];
    sem_init(&waiter, 0, 2);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&chopsticks[i], NULL);
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
        pthread_mutex_destroy(&chopsticks[i]);
    }

    sem_destroy(&waiter);
    printf("Dinner simulation complete.\n");
    return 0;
}
